{"version":3,"sources":["components/Navbar/index.js","utils/API.js","components/EmployeesTable/index.js","components/SearchBar/index.js","components/Employees/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","axios","get","name","EmployeesTable","props","console","log","results","scope","map","result","src","avatar_url","alt","style","height","width","login","href","html_url","rel","target","DOB","SearchBar","htmlFor","value","onChange","handleInputChange","list","type","placeholder","id","onClick","handleFormSubmit","Employees","state","search","employeeList","query","API","then","res","setState","data","catch","err","event","preventDefault","this","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0599babc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Navbar() {\r\n\treturn (\r\n\t\t<div className=\"jumbotron jumbotron-fluid\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h1 className=\"display-4\">Welcome to your Employee Directory</h1>\r\n\t\t\t\t<p className=\"lead\">\r\n\t\t\t\t\tClick on carrot to filter by heading or use the search box to narrow\r\n\t\t\t\t\tyour results.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from 'axios';\r\nexport default {\r\n\tgetRandomEmployee : function() {\r\n\t\treturn axios.get('https://api.github.com/orgs/github/public_members');\r\n\t},\r\n\tgetEmployee       : function(name) {\r\n\t\treturn axios.get(\r\n\t\t\t'https://api.github.com/orgs/github/public_members/' + name\r\n\t\t);\r\n\t}\r\n};\r\n","import React from 'react';\r\n\r\nfunction EmployeesTable(props) {\r\n\tconsole.log(props.results);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead className=\"thead-dark\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"col\">Profile Picture</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t<th scope=\"col\">GitHub account</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Email</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{props.results.map((result) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\tsrc={result.avatar_url}\r\n\t\t\t\t\t\t\t\t\t\talt=\"profile name\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ height: 100, width: 100 }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t\t\t<td>{result.login}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref={result.html_url}\r\n\t\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tGithub Account{' '}\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{result.DOB}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default EmployeesTable;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchBar(props) {\r\n\treturn (\r\n\t\t<form className=\"search\">\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label htmlFor=\"employee\">Search by name:</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.handleInputChange}\r\n\t\t\t\t\tname=\"employee\"\r\n\t\t\t\t\tlist=\"employees\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tplaceholder=\"search for an employee\"\r\n\t\t\t\t\tid=\"employee\"\r\n\t\t\t\t/>\r\n\t\t\t\t{/* <datalist id=\"breeds\">\r\n\t\t\t\t\t{props.breeds.map((breed) => <option value={breed} key={breed} />)}\r\n\t\t\t\t</datalist> */}\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tonClick={props.handleFormSubmit}\r\n\t\t\t\t\tclassName=\"btn btn-success\"\r\n\t\t\t\t>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport API from '../../utils/API';\r\nimport EmployeesTable from '../EmployeesTable';\r\nimport SearchBar from '../SearchBar';\r\n\r\n// employeeList = query =>{\r\n// \tAPI.search(query)\r\n\r\n// };\r\n\r\nclass Employees extends Component {\r\n\tstate = {\r\n\t\tresult : [],\r\n\t\tsearch : ''\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tthis.employeeList();\r\n\t}\r\n\r\n\temployeeList = (query) => {\r\n\t\tAPI.getRandomEmployee(query)\r\n\t\t\t.then((res) => this.setState({ result: res.data }))\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\thandleInputChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tsearch : event.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleFormSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tAPI.getEmployee(this.state.search);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<SearchBar\r\n\t\t\t\t\tvalue={this.state.search}\r\n\t\t\t\t\thandleInputChange={this.handleInputChange}\r\n\t\t\t\t\thandleFormSubmit={this.handleInputChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<EmployeesTable results={this.state.result} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Employees;\r\n","import React from 'react';\n\nimport Navbar from './components/Navbar';\n\nimport Employees from './components/Employees';\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Navbar />\n\t\t\t<Employees />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}