{"version":3,"sources":["components/Navbar/index.js","components/SearchBar/index.js","components/Employees/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","SearchBar","props","className","htmlFor","value","search","onChange","handleInputChange","name","list","type","placeholder","id","onClick","handleFormSubmit","Employees","scope","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4SAkBeA,MAdf,WACC,OACC,yBAAKC,MAAM,6BACV,yBAAKA,MAAM,aACV,wBAAIA,MAAM,aAAV,sCACA,uBAAGA,MAAM,QAAT,yF,MCyBWC,MA9Bf,SAAmBC,GAClB,OACC,0BAAMC,UAAU,UACf,yBAAKA,UAAU,cACd,2BAAOC,QAAQ,SAAf,mBACA,2BACCC,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,kBAChBC,KAAK,QACLC,KAAK,SACLC,KAAK,OACLR,UAAU,eACVS,YAAY,SACZC,GAAG,UAKJ,4BACCF,KAAK,SACLG,QAASZ,EAAMa,iBACfZ,UAAU,mBAHX,a,MC2BWa,MAzCf,WACC,OACC,6BACC,2BAAOhB,MAAM,SACZ,2BAAOA,MAAM,cACZ,4BACC,wBAAIiB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGF,+BACC,4BACC,wBAAIA,MAAM,OAAV,KACA,oCACA,oCACA,oCACA,2CAED,4BACC,wBAAIA,MAAM,OAAV,KACA,qCACA,wCACA,oCACA,2CAED,4BACC,wBAAIA,MAAM,OAAV,KACA,qCACA,wCACA,wCACA,+CCvBSC,MAZf,WACC,OACC,kBAAC,IAAD,KACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,0BAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,0BAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.6f6a38f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Navbar() {\r\n\treturn (\r\n\t\t<div class=\"jumbotron jumbotron-fluid\">\r\n\t\t\t<div class=\"container\">\r\n\t\t\t\t<h1 class=\"display-4\">Welcome to your Employee Directory</h1>\r\n\t\t\t\t<p class=\"lead\">\r\n\t\t\t\t\tClick on carrot to filter by heading or use the search box to narrow\r\n\t\t\t\t\tyour results.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchBar(props) {\r\n\treturn (\r\n\t\t<form className=\"search\">\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label htmlFor=\"breed\">Search by name:</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={props.search}\r\n\t\t\t\t\tonChange={props.handleInputChange}\r\n\t\t\t\t\tname=\"breed\"\r\n\t\t\t\t\tlist=\"breeds\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tplaceholder=\"Search\"\r\n\t\t\t\t\tid=\"breed\"\r\n\t\t\t\t/>\r\n\t\t\t\t{/* <datalist id=\"breeds\">\r\n\t\t\t\t\t{props.breeds.map((breed) => <option value={breed} key={breed} />)}\r\n\t\t\t\t</datalist> */}\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tonClick={props.handleFormSubmit}\r\n\t\t\t\t\tclassName=\"btn btn-success\"\r\n\t\t\t\t>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport API from '../../utils/API';\r\n\r\n// employeeList = query =>{\r\n// \tAPI.search(query)\r\n\r\n// };\r\n\r\nfunction Employees() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table class=\"table\">\r\n\t\t\t\t<thead class=\"thead-dark\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"col\">Image</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Phone</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Email</th>\r\n\t\t\t\t\t\t<th scope=\"col\">DOB</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t\t\t\t<td>Mark</td>\r\n\t\t\t\t\t\t<td>Otto</td>\r\n\t\t\t\t\t\t<td>@mdo</td>\r\n\t\t\t\t\t\t<td>00/00/0000</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"row\">2</th>\r\n\t\t\t\t\t\t<td>Jacob</td>\r\n\t\t\t\t\t\t<td>Thornton</td>\r\n\t\t\t\t\t\t<td>@fat</td>\r\n\t\t\t\t\t\t<td>00/00/0000</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"row\">3</th>\r\n\t\t\t\t\t\t<td>Larry</td>\r\n\t\t\t\t\t\t<td>the Bird</td>\r\n\t\t\t\t\t\t<td>@twitter</td>\r\n\t\t\t\t\t\t<td>00/00/0000</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Employees;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport SearchBar from './components/SearchBar';\nimport Employees from './components/Employees';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<SearchBar />\n\t\t\t\t<Employees />\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}